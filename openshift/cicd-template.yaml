apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: app,jenkins,nexus,cicd,agent
  name: cicd
message: "Use the following credentials for login:\nJenkins: use your OpenShift credentials\nNexus: admin/admin123\nSonarQube: admin/admin\n"
parameters:
- displayName: DEV project name
  value: test-dev
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  value: test-stage
  name: STAGE_PROJECT
  required: true
- displayName: Ephemeral
  description: Use no persistent storage for Nexus
  value: "true"
  name: EPHEMERAL
  required: true
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-python-bokeh-pipeline
      name: cicd-python-bokeh-pipeline
    name: python-bokeh-pipeline-preloaded
  spec:
    triggers:
      - type: GitHub
        github:
          secret: "secret101"
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        jenkinsfile: |-
            pipeline {
                agent {
                    label 'agent'
                }

                environment {
                    APPLICATION_NAME="example-python-bokeh-apps"
                    APPLICATION_VERSION="1.0"
                    GIT_REPO="https://github.com/coryk2049/example-python-bokeh-apps.git"
                    GIT_BRANCH="master"
                    DEV_PROJECT="test-dev"
                    STAGE_PROJECT="test-stage"
                    STAGE_TAG="promoteToQA"
                    DEV_BOKEH_ALLOW_WS_ORIGIN="example-python-bokeh-apps-test-dev.128.60.8.73.nip.io"
                    STAGE_BOKEH_ALLOW_WS_ORIGIN="example-python-bokeh-apps-test-stage.128.60.8.73.nip.io"
                    SONAR_LOGIN="admin"
                    SONAR_PASS="admin"
                    SONAR_ENDPOINT="http://sonarqube:9000" 
                    SONAR_SRC="./apps/"
                }

                stages {
                    stage('Check Out Latest') {
                        steps {
                            git branch: "${GIT_BRANCH}", url: "${GIT_REPO}"
                            sh "pwd; tree"
                        }
                    }
                    stage('Unit Test') {
                        steps {
                            sleep 1
                        }
                    }    
                    stage('Code Analysis') {
                        steps {
                            script {
                                sh '''
                                SONARQUBE_SCANNER_VERSION=4.0.0.1744
                                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONARQUBE_SCANNER_VERSION-linux.zip
                                unzip sonar-scanner-cli-$SONARQUBE_SCANNER_VERSION-linux.zip 
                                rm sonar-scanner-cli-$SONARQUBE_SCANNER_VERSION-linux.zip 
                                mv sonar-scanner-$SONARQUBE_SCANNER_VERSION-linux sonarqube-scanner
                                sed -i 's/use_embedded_jre=true/use_embedded_jre=false/g' sonarqube-scanner/bin/sonar-scanner
                                ./sonarqube-scanner/bin/sonar-scanner -X -Dsonar.login=${SONAR_LOGIN} -Dsonar.password=${SONAR_PASS} -Dsonar.projectBaseDir=. -Dsonar.projectKey=MyProjectKey -Dsonar.projectName="${APPLICATION_NAME}" -Dsonar.projectVersion="${APPLICATION_VERSION}" -Dsonar.sources=${SONAR_SRC} -Dsonar.host.url=${SONAR_ENDPOINT}
                                '''
                            }
                        }
                    }
                    stage('Archive App') {
                        steps {
                            sleep 1
                        }
                    }
                    stage('Create Image Builder') {
                        when {
                            expression {
                                openshift.withCluster() {
                                    openshift.withProject(DEV_PROJECT) {
                                        return !openshift.selector("bc", "${APPLICATION_NAME}").exists();
                                    }
                                }
                            }
                        }
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject(DEV_PROJECT) {
                                        sleep 1
                                        //openshift.newBuild("--name=cory-bokeh", "--image-stream=openshift/wildfly:13.0", "--binary=true")
                                    }
                                }
                            }
                        }
                    }
                    stage('Build Image') {
                        when {
                            expression {
                                openshift.withCluster() {
                                    openshift.withProject(DEV_PROJECT) {
                                        return !openshift.selector("bc", "${APPLICATION_NAME}").exists();
                                    }
                                }
                            }
                        }
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject(DEV_PROJECT) {
                                        sleep 1
                                        //openshift.selector("bc", "${APPLICATION_NAME}").startBuild("--from-dir=oc-build", "--wait=true")
                                    }
                                }
                            }
                        }
                    }
                    stage('Create DEV') {
                        when {
                            expression {
                                openshift.withCluster() {
                                    openshift.withProject(DEV_PROJECT) {
                                        return !openshift.selector("bc", "${APPLICATION_NAME}").exists();
                                    }
                                }
                            }
                        }
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject(DEV_PROJECT) {
                                        def app = openshift.newApp("${GIT_REPO}")
                                        def dc = openshift.selector("dc", "${APPLICATION_NAME}")
                                        sh "oc project"
                                        sh "oc project ${DEV_PROJECT}"
                                        sh "oc set env dc/${APPLICATION_NAME} BOKEH_ALLOW_WS_ORIGIN=${DEV_BOKEH_ALLOW_WS_ORIGIN}"
                                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                            sleep 5
                                        }
                                        openshift.set("triggers", "dc/${APPLICATION_NAME}", "--manual")
                                        app.narrow("svc").expose();
                                    }
                                }
                            }
                        }            
                    }
                    stage('Deploy DEV') {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject(DEV_PROJECT) {
                                        openshift.selector("dc", "${APPLICATION_NAME}").rollout().latest();
                                    }
                                }
                            }
                        }
                    }
                    stage('Promote to STAGE?') {
                        steps {
                            timeout(time:15, unit:'MINUTES') {
                                input message: "Promote to STAGE?", ok: "Promote"
                            }
                            script {
                                openshift.withCluster() {
                                    openshift.tag("${DEV_PROJECT}/${APPLICATION_NAME}:latest", "${STAGE_PROJECT}/${APPLICATION_NAME}:${STAGE_TAG}")
                                }
                            }
                        }
                    }
                    stage('Deploy STAGE') {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject(STAGE_PROJECT) {
                                        if (openshift.selector('dc', '${APPLICATION_NAME}').exists()) {
                                            openshift.selector('dc', '${APPLICATION_NAME}').delete()
                                            openshift.selector('svc', '${APPLICATION_NAME}').delete()
                                            openshift.selector('route', '${APPLICATION_NAME}').delete()
                                        }
                                        def app = openshift.newApp("${APPLICATION_NAME}:${STAGE_TAG}")
                                        sh "oc project"
                                        sh "oc project ${STAGE_PROJECT}"
                                        sh "oc set env dc/${APPLICATION_NAME} BOKEH_ALLOW_WS_ORIGIN=${STAGE_BOKEH_ALLOW_WS_ORIGIN}"
                                        app.narrow("svc").expose();
                                    }
                                }
                            }
                        }
                    }
                }
            }

      type: JenkinsPipeline
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicd-python-bokeh-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    agent-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>agent</name>
        <privileged>false</privileged>
        <alwaysPullImage>true</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>agent</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>docker.io/openshift/jenkins-slave-base-centos7:v3.11</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir></workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu>200m</resourceRequestCpu>
            <resourceRequestMemory>512Mi</resourceRequestMemory>
            <resourceLimitCpu>2</resourceLimitCpu>
            <resourceLimitMemory>4Gi</resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
# Setup Demo Installer
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: cicd-python-bokeh-installer
  spec:
    activeDeadlineSeconds: 400
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |
            oc set resources dc/jenkins --limits=memory=1Gi --requests=memory=512Mi
            oc label dc jenkins app=jenkins --overwrite

            HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${CICD_NAMESPACE}.//g")
            sleep 5

            oc new-app registry.centos.org/rhsyseng/sonarqube
            oc expose svc/sonarqube

            oc new-app -f registry.centos.org/rhsyseng/sonarqube
            oc expose svc/sonarqube

            #oc new-app https://github.com/coryk2049/sonar-scanner
           
            if [ "${EPHEMERAL}" == "true" ] ; then
              oc new-app -f https://raw.githubusercontent.com/epe105/nexus/master/nexus3-template.yaml --param=NEXUS_VERSION=3.7.1 --param=MAX_MEMORY=2Gi
            else
              oc new-app -f https://raw.githubusercontent.com/epe105/nexus/master/nexus3-persistent-template.yaml --param=NEXUS_VERSION=3.8.0 --param=MAX_MEMORY=2Gi
            fi
          image: openshift/origin:v3.11
          name: cicd-python-bokeh-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never
